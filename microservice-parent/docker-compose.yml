

services:
  # Keycloak service
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - "8096:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  # Postgres for Keycloak
  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    ports:
      - "5431:5432"
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    networks:
      - spring

  # API Gateway
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway  # Path to the api-gateway folder containing the Dockerfile
    ports:
      - "9001:9000"
    depends_on:
      - order-service
      - product-service
    networks:
      - spring


  # Product Service
  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8083:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  # Order Service
  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8068:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring
      # Inventory Service
  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8058:8088"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  # Postgres for Order Service
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres/order:/data/postgres
    networks:
      - spring

  # Postgres for Inventory Service
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    ports:
      - "5434:5432"
    volumes:
      - ./data/postgres/inventory:/data/postgres
    networks:
      - spring

  # MongoDB
  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - spring

  # Mongo Express (for MongoDB UI)
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - "8078:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - spring

  # PgAdmin (for Postgres UI)
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    networks:
      - spring

networks:
  spring:
    driver: bridge
